type: edu
custom_name: Game time!
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            output = main.execute("1");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check the results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one.");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4");

            Integer[] usedNums = getUsedNumbers(main, 4);
            boolean check = getPermutations(main, 4, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6");

            Integer[] usedNums = getUsedNumbers(main, 6);
            boolean check = getPermutations(main, 6, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("An error message expected with input \"11\"");
            }
        }


        Integer[] getUsedNumbers(TestedProgram main, int length) {
            Integer[] nums = new Integer[length];
            int[] result;

            int index = 0;
            String output;
            String input;

            for (int i = 0; i < 10; i++) {
                input = new String(new char[length]).replace("\0", Integer.toString(i));
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    nums[index++] = i;
                }

                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                    "Output should contain " + length + " bulls " +
                            "summarized as every option was tried. Found: " + index
                );
            }

            return nums;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        private static void swap(Integer[] input, int a, int b) {
            int tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }


        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ows?").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ulls?").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                    "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }
    }
  learner_created: false
- name: src/bullscows/SecretCode.java
  visible: true
  text: |-
    package bullscows;


    /**
     * ~~Class description~~
     * This class has the task of generating a new secret code of a user-given length, which than has to be guessed in the
     * Bulls and Cows game. In the process, System.nanoTime is utilized to generate a pseudo-random number as a string.
     * The secret code's length must not exceed a length of 10, since longer numbers would lack uniqueness of numbers.
     * The code written here is a pre-requirement for the further game development. For further detail, please read
     * the task description.
     * <p>
     * <p>
     * ~~Task description~~
     * Using a predefined secret code doesn't make a fun game. Let's implement the ability to generate a pseudo-random
     * secret number of a given length. If the length is greater than 10, print a warning message and do not
     * generate a number.
     * <p>
     * We suggest you use the following algorithm to generate the numbers:
     * long pseudoRandomNumber = System.nanoTime();
     * This code saves the nanoseconds elapsed since a certain time to the pseudoRandomNumber variable. We can assume
     * that this is a random number. You can generate a secret code by iterating over the pseudoRandomNumber in the
     * reverse order and adding unique digits. If the pseudoRandomNumber lacks the required number of unique digits,
     * call System.nanoTime() again and try to generate the secret code again until you get a satisfactory result.
     * You can use the Character.getNumericValue(char a) method to get an integer representation of a number!
     * <p>
     * Objective
     * In this stage, your program should generate a pseudo-random number of a given length with unique digits and print it.
     * If the length is greater than 10, the program should print a message containing the word Error. The secret code may
     * contain any digits from 0 to 9 but only once. The secret code shouldn't start with a digit 0: for the first digit of
     * the secret code, use digits from 1 to 9.
     * Don't delete your previous work, just move your code to a separate method. You will need it in the future stages.
     * <p>
     * Examples
     * The greater-than symbol followed by a space > represents the user input. Note that it's not part of the input.
     * Example 1
     * > 5
     * The random secret number is 48379.
     * <p>
     * Example 2
     * > 4
     * The random secret number is 5213.
     * <p>
     * Example 3
     * > 11
     * Error: can't generate a secret number with a length of 11 because there aren't enough unique digits.
     * <p>
     */

    public class SecretCode {
        private int codeGivenSize;

        // Create getSecretCode and createCode are separated from each other to maintain re-usability.
        // This way, adjustCodeLength can be utilized createCode to generate an additional secret code,
        // if the first one is too small.
        public String getSecretCode(int codeGivenSize) {
            this.codeGivenSize = codeGivenSize;

            while (this.codeGivenSize > 10) {
                System.out.printf("\nError: can't generate a secret number with a length of %d because " +
                        "there aren't enough unique digits.", codeGivenSize);

                this.codeGivenSize = Integer.parseInt(Main.getInput());
            }

            StringBuilder randomCode = createCode();

            while (randomCode.length() != this.codeGivenSize) {
                adjustCodeLength(randomCode);
            }

            return randomCode.toString();
        }

        // Creates a new secret code which will be customized as the task requests.
        // Code length is not affected, so there are more digits to choose if a second code for spare numbers is needed.
        private StringBuilder createCode() {
            StringBuilder code = new StringBuilder(getPseudoRandomNumberString());

            reverseCode(code);
            deleteLeadingZero(code);
            deleteDuplicates(code);

            return code;
        }

        public void reverseCode(StringBuilder generatedCode) {
            generatedCode.reverse();
        }

        private void deleteLeadingZero(StringBuilder generatedCode) {
            while (generatedCode.charAt(0) == '0') {
                generatedCode.delete(0, 1);
            }
        }

        // Inner loop compares all the other characters to the character of the outer loop.
        // It runs backwards to prevent skipping indices after deletion.
        private void deleteDuplicates(StringBuilder generatedCode) {
            for (int i = 0; i < generatedCode.length(); i++) {
                for (int j = generatedCode.length() - 1; j > i; j--) {
                    if (generatedCode.charAt(i) == generatedCode.charAt(j)) {
                        generatedCode.deleteCharAt(j);
                    }
                }
            }
        }

        private void adjustCodeLength(StringBuilder generatedCode) {
            if (generatedCode.length() > codeGivenSize) {
                shortenCode(generatedCode);
            } else {
                extendCode(generatedCode);
            }
        }

        private void shortenCode(StringBuilder generatedCode) {
            generatedCode.delete(codeGivenSize, generatedCode.length());
        }

        private void extendCode(StringBuilder generatedCode) {
            StringBuilder spareRandomCode = createCode();
            generatedCode.append(spareRandomCode);
            deleteDuplicates(generatedCode);
        }

        private String getPseudoRandomNumberString() {
            return Long.toString(System.nanoTime());
        }

    }
  learner_created: true
- name: src/bullscows/Grader.java
  visible: true
  text: |-
    package bullscows;

    public class Grader {
        private int bulls = 0;
        private int cows = 0;

        protected int[] countCows(char[] secret, char[] guess) {
            for (int i = 0; i < secret.length; i++) {
                for (int j = 0; j < guess.length; j++) {
                    if (secret[i] == guess[j] && i == j) {
                        bulls++;
                    }

                    if (secret[i] == guess[j]) {
                        cows++;
                    }
                }
            }
            return new int[]{bulls, cows >= bulls ? cows - bulls : cows};
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5432#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 31 May 2023 20:50:20 UTC"
record: 4
